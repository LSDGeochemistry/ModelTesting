# -*- coding: utf-8 -*-
"""
Created on Mon Sep 24 12:48:31 2018

@author: LHMK
"""
###Flowtube creator file for LSDMixingModel, reqiore RICHDEM and Rasterio packages installed 
###This script loads a hillslope raster and transect data and uses them to find the following parameters for use in the LSDMixingModel:
##Parameters found 
#number of nodes to model the transect
#downslope distance of those nodes (ds_dist)
#width of flowtube (width)
#Area of flowtube surface (A_poly)
#Elevation of nodes (meas elev)
import numpy as np
import richdem as rd
import rasterio as rio
from rasterio.transform import from_bounds
from matplotlib import pyplot as plt

###Input the parameters
#Gridded data e.g.raster file
#Load the data and convert it to an array for RichDEM
fname = 'L:/feather_river_mixing_paper/dem/pomd_out.tif'
# Loading the raster with rasterio


def load_raster(fname):

	"""

	Load a raster array with different options

	TODO: description

	"""



	# Loading the raster with rasterio

	this_raster = rio.open(fname)



	# Initialising a dictionary containing the raster info for output

	out = {}

	# I am padding a no_data contour

	gt = this_raster.res

	out['res'] = gt[0]

	out["ncols"] = this_raster.width+1

	out["nrows"] = this_raster.height+1

	out["x_min"] = this_raster.bounds[0]-out['res']

	out["y_min"] = this_raster.bounds[1]-out['res']

	out["x_max"] = this_raster.bounds[2]+out['res']

	out["y_max"] = this_raster.bounds[3]+out['res']

	out["extent"] = [out["x_min"],out["x_max"],out["y_min"],out["y_max"]]

	out["array"] = this_raster.read(1)

	out['crs'] = this_raster.crs['init']

	out['nodata'] = this_raster.nodatavals

    out['transform'] = this_raster.transform
	

	# pixelSizeY =-gt[4]

	# (left=358485.0, bottom=4028985.0, right=590415.0, top=4265115.0)



	return out


############




temp = load_raster(fname)
temp['array']
raster = rd.rdarray(temp['array'], no_data=temp['nodata'][0])

rasterfig = rd.rdShow(raster, ignore_colours=[0], axes=False, cmap='gist_earth', figsize=(8,5.5))

raster.geotransform = (this_=raster.transform[2],this_raster.transform[0],this_raster.transform[1],this_raster.transform[5],this_raster.transform[3],this_raster.transform[4])


raster_filled = rd.FillDepressions(raster, in_place=False)

rasterfig_filled = rd.rdShow(raster_filled, ignore_colours=[0], axes=False, cmap='jet', vmin=rasterfig['vmin'], vmax=rasterfig['vmax'], figsize=(8,5.5))

#Depth data with x,y,z locations of pits along with soil depth, this must be in the same format as the gridded data and from this intermediuate pits can be calculated


###Running the script
#Find the streamline down between the pits to get the center of the flowtube

#Then find the 2 boundaries of it by giving an initial max width by following along the contours until you reach the predetermined max 
 
#Now run the streamline for both these boundary lines
 
#Go down each flowpath collecting the elevation and downstream distance data
 
#Now go through each pit/intermediate pit point and find the corresponding point of the boundary flow lines on the contour
 
#For each node we then follow th econtour through the points to get the widths
 
#Then we find the area either by finding the area of a quadrilateral or by some fancy curvilinear thing I still need to check
 
#Now output all the relvant data to a ft_details.param file

